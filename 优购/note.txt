项目搭建流程 
1、建立新（空）的项目列表 清楚默认生成的所有内容 在APP.json中添加可能会使用的APP
2、引入小图标--比如
  https://www.iconfont.cn/ 查找想要的图标 收藏或者添加到项目等方式  获取相关的下载代码
  css代码要手动引入 根据图标的class对其进行限制（与bootstrap类似，只不过bootstrap帮我们引入了而已）
  比如引入购物车 <view class="iconfont icon-gouwuche"></view>  前者是必须要引入的样式 后者是根据自己所选择的图标进行选择
3、taBar页面的完成 在APP.json中进行配置
4、主题颜色 app.wxss的全局样式的确定
5、搜索框组件的完成 ps:搜索框只是一个样式 真正点击之后是跳转到搜索界面 而不是在此输入框中进行搜索
6、获取轮播图信息 为了模拟真实的项目开发 轮播图信息都是上传到服务器上 在通过网络请求从服务器获取相关的数据 用获取的数据在导入到页面上，不把数据写死，以后对服务器中的数据进行修改，直接影响到相关的页面
7、根据data中存放的图片URL 写出轮播图（基础）
8、使用promise对网络请求进行封装 使用es6的promise技术 其放在request文件夹中，避免回调地狱的问题
 原方法-直接在生命周期函数中使用request请求：
 wx-wx.request({
      url: 'https://api-hmugo-web.itheima.net/api/public/v1/home/swiperdata',
      success: (result) => {
       this.setData({
         swiperList:result.data.message
       })
      },
      fail:(result)=>{
        console.log("获取轮播图信息失败")
      }
      
    })
9、与轮播图的样式相似 创建导航图标 同时对轮播图和导航图进行优化 具体优化内容为 原本是在生命周期里面直接写函数，现在在生命周期内调用函数，在外部写函数
10、完成楼层页面 （同样从服务器中调取数据完成）css的操作 注意多重循环
11、开始分类页面的制作
  1、与首页相同的 导入从服务器中获得的数据
  2、从服务器中获得的数据需要进行分析 然后在进行赋值到不同的标签中
  3、为了避免反复发送请求，因此我们要设置本地存储
  4、按照之前的循环一致的，不断的循环 使用css样式渲染页面
12、创建商品列表中的 综合 销量 价格组件
  该组件不同于搜索组件是写死数据的 该组件需要父类向组件传递信息 组件返回信息给子类
13 在综合商品下面导出相关的商品数据
  1、获取相关的数据信息，在js文件夹中放在data中，在页面进行wx-for遍历
  2、超链接进入商品列表时候传入了cid数据 这些数据保存在onLoad: function (options) {}中的options中
    传入的方法为(实例 其中传入的值都会被保存):url="/pages/goods_detail/index?goods_id={{item.goods_id}}">
  3、将获取的数据，将商品展示出来
  4、碰到底部继续加载----》list使用es6的语法进行加载，调用生命周期函数
  4、下拉刷新 ---》清空list，清空页码 重新从服务器中加载信息
  5、UI优化 加载页面的加载中样式--->微信已经进行封装
14 商品详情
  1、通过request请求获取商品的信息使其存在于data中
  2、服务器传入很多东西，但是只有一小部分是有用的，因此在set的是候只把一小部分的内容处理好就行了
  3、完成 点击轮播图能放大预览图片 使用wx的API完成
  4、完成固定在下面的客服、分享、立即购买等相关的功能
  5、当点击加入购物车之后，本地缓存记录加入购物车的id，数量等信息 （模拟操作，正常的加入购物车等信息都是在服务器中的数据库中存储）
15 购物车界面----最复杂的界面
  1、完成点击按钮 获取收获地址信息，放入缓存 --->由于API优化，不需要用户授权即可获得相关的信息，但视频中的思想是值得我们学习的 https://www.bilibili.com/video/BV1nE41117BQ?p=84&spm_id_from=pageDriver
  2、当缓存有信息的时候，把缓存中的信息放入data中
  3、当data中有address的时候展示信息，当data中没有address的信息显示获取地址的信息
  4、完成购物车的信息显示
  5、完成购物车下部全选、合计、结算等样式的静态页面样式
  6、动态导入相关的购物车界面
  7、购物车全选的设置
  8、购物车总数与价格的运算  tip：要勾选才进行统计
  9、购物车的全选与全选的反选操作
  10、商品数量的编辑
  11、当商品数量为1时候点击-，此时触发商品的删除操作
  12、当购物车里面没有东西的时候，展示一张图片
  13、完成结算界面--->跳转到支付页面
15 支付界面
  error--->个人开发者没有权限调用微信支付

16 个人中心页面
  1、首先创建好一个登录界面，能获取用户的个人信息并存在缓存
  2、当存在个人信息的缓存的时候，展示头像与昵称的界面，当不存在个人信息的时候，展示登录页面
  3、完成静态的个人中心页面
  4、完成超链接的设置以及动态的渲染
  5、订单，退货换货的页面完成.....>个人开发者没有权限调用微信支付，因此无法完成此页面
17 收藏界面
  1、在商品详情界面添加新的属性，用于鉴别是否被收藏
  2、把信息存入缓存，以便使用
  3、在商品详情的onload界面增加新功能，读取读取储存并判断商品有没有被收藏
  4、在个人中心页面，正确的显示已经被收藏的商品数量
18 收藏的商品界面
  引入tab组件
  完成静态界面的书写
  完成数据的动态渲染---->放在组件中的数据
19 搜索页面
  完成基础的样式---->静态页面
  获取用户输入的值---->data
  将用户输入的data传入服务器中，获取服务器中的值
  进行动态渲染
  防抖动--->避免一次输入一个字符，就像服务器发送一次请求，防止请求过于频繁
 20 意见反馈界面
  完成静态界面的书写
  创建umg组件，用于展示所选择的照片
  使用tab组件，完成页面的渲染
  页面的动态渲染



  
  













tip：一些API：
     this.triggerEvent("父类函数名",传递的值);--->子组件向父组件传递数据
     bindtabsItemChange=“函数” 当项目发生改变时调用
     wx.previewImage--->wx的一个API，预览图片，并且图片能够进行分享
     

